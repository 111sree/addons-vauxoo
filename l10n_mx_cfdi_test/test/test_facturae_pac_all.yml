-
  To test the Mexican Electronic Invoice
-
  !python {model: account.invoice}: |
    from l10n_mx_cfdi_test import timer as ti
    import xml
    import netsvc
    import tools, os, base64
    import logging
    from tools.misc import mute_logger
    ir_model_data = self.pool.get('ir.model.data')
    acc_jour_obj = self.pool.get('account.journal')
    ir_attachment_mx_obj = self.pool.get('ir.attachment.facturae.mx')
    aml_obj = self.pool.get('account.invoice.line')
    tax_obj = self.pool.get('account.invoice.tax')
    wf_service = netsvc.LocalService("workflow")
    journal_ids = acc_jour_obj.search(cr, uid, [], context=context)
    # TODO: Get logger variable
    _logger = logging.getLogger("openerp.tools.yaml_import")
    res_id = False
    time_total = 0
    type_document = False
    for journal_data in acc_jour_obj.browse(cr, uid, journal_ids, context=context):
        if (journal_data.sequence_id and journal_data.sequence_id.approval_id and journal_data.sequence_id.approval_id.id) and journal_data.type in ('sale', 'sale_refund'):
            for type_test_cancel in ['cancel_from_invoce','cancel_from_attachment_facturae_mx']:
                time_total = 0
                all_ok = False
                type_journal = False
                pac_type = journal_data.sequence_id.approval_id and journal_data.sequence_id.approval_id.res_pac and journal_data.sequence_id.approval_id.res_pac.name or False
                ir_model_id = ir_model_data.search(cr, uid, [('res_id','=',journal_data.id),('model','=','account.journal')])
                if ir_model_id:
                    module_journal =  ir_model_data.browse(cr, uid, ir_model_id[0], context=context).module.encode('UTF8')
                    name_journal = ir_model_data.browse(cr, uid, ir_model_id[0], context=context).name.encode('UTF8')
                    journal_xml_id = '%s.%s' % (module_journal,name_journal)
                    try:
                        if journal_data.type == 'sale':
                            type_journal = 'out_invoice'
                            type_document = "Invoice"
                        elif journal_data.type == 'sale_refund':
                            type_journal = 'out_refund'
                            type_document = "Refund Sale"
                        log("To test the Mexican Electronic %s %s %s" % (type_document,pac_type,type_test_cancel))
                        #################################################################################################
                        #     1 Duplicate invoice of l10n_mx_facturae_base to xx                                        #
                        #################################################################################################
                        log("1 Duplicate %s of l10n_mx_facturae_base" % (type_document))
                        with ti.Timer() as t:
                            invoice_id = self.copy(cr, uid, ref('l10n_mx_facturae_base.ai_pac_facturae_0'), context=context)
                            invoice_lines = self.read(cr, uid, [invoice_id],['invoice_line'])
                            if invoice_lines:
                                for line in invoice_lines[0]['invoice_line']:
                                    # This write is because I need the invoice to be different and is added to the product description on the invoice id 
                                    for r in aml_obj.read(cr, uid, [line]):
                                        new_name_product = '%s invoice: %s'%(r['name'], invoice_id)
                                    aml_obj.write(cr, uid, [line],{'name': new_name_product})
                            self.write(cr, uid, [invoice_id], {'journal_id':ref(journal_xml_id), 'type': type_journal },context=context)
                            xml_id_invoice = 'ai_pac_facturae_%s_%s'% (pac_type,invoice_id)
                            data_ids = ir_model_data.search(cr, uid, [('model', '=', self._name), ('name', 'like', xml_id_invoice)])
                            if not data_ids:
                                res_id = ir_model_data.create(cr, uid, {
                                                'name': xml_id_invoice,
                                                'model': self._name,
                                                'res_id': invoice_id,
                                                'module': 'l10n_mx_cfdi_test'
                                            })
                        #~ print "Time duplicate invoice: %s s" % t.secs
                        time_tmp = t.secs
                        time_total += time_tmp
                        log("*** Time duplicate %s : %s s" % (type_document,time_tmp))
                        #################################################################################################
                        #                                Browse of invoice                                              #
                        #################################################################################################
                        invoice_data = self.browse(cr, uid, invoice_id, context=context)
                        
                        #################################################################################################
                        #                       2 I check that Journal is                                               #
                        #################################################################################################
                        log("2 I check that Journal is %s" % (journal_xml_id))
                        assert invoice_data.journal_id.id==ref(journal_xml_id), 'This invoice has not assigned this %s' % (journal_xml_id)
                        
                        #################################################################################################
                        #                       3 I check that Initially customer invoice state is "Draft"              #
                        #################################################################################################
                        log("3 I check that Initially customer %s %s state is Draft"% (type_document,xml_id_invoice))
                        assert invoice_data.state == 'draft', 'This invoice has not state in draft'
                        
                        #################################################################################################
                        #                       4 I open invoice by clicking on Create button                           #
                        #################################################################################################
                        log("4 I open %s by clicking on Create button %s" % (type_document,xml_id_invoice))
                        with ti.Timer() as t:
                            wf_service.trg_validate(uid, 'account.invoice', ref(xml_id_invoice), 'invoice_open', cr)
                        time_tmp = t.secs
                        time_total += time_tmp
                        log("*** Open %s: %s s" % (type_document,time_tmp))
                        #################################################################################################
                        #                                Update browse of invoice                                       #
                        #################################################################################################
                        invoice_data = self.browse(cr, uid, invoice_id, context=context)
                        
                        #################################################################################################
                        #                       5 I check that the invoice state is "Open"                              #
                        #################################################################################################
                        log("5 I check that the %s %s state is Open"% (type_document,xml_id_invoice))
                        assert invoice_data.state == 'open', 'This invoice has not state in open'
                        
                        #################################################################################################
                        #    6 I check that the state in l10n_mx attachment facturae is "Confirmed"     #
                        #################################################################################################
                        log("6 I check that the state in l10n_mx attachment facturae %s is Confirmed"%(xml_id_invoice))
                        cfdi_attachment_ids = ir_attachment_mx_obj.search(cr, uid, [('id_source', '=', ref(xml_id_invoice) ),('model_source','=','account.invoice'), ('state', '<>', 'cancel')], limit=1)
                        cfdi_attachment_id = cfdi_attachment_ids and cfdi_attachment_ids[0] or False
                        state = 'no attach file'
                        if cfdi_attachment_id:
                            cfdi_attachment_data = ir_attachment_mx_obj.browse(cr, uid, cfdi_attachment_id)
                            state = cfdi_attachment_data.state
                            ir_attach_facturae_mx = cfdi_attachment_data.file_input and cfdi_attachment_data.file_input or False
                            fdata = ir_attach_facturae_mx and ir_attach_facturae_mx.db_datas or False
                            data_invoice = self.read(cr, uid, invoice_id,[])
                            data_xml = base64.decodestring( fdata )
                            doc_xml = xml.dom.minidom.parseString(data_xml)
                            tax_lines = self.read(cr, uid, [invoice_id],['tax_line'])
                            list_price_subtotal = []
                            list_price_unit = []
                            list_importe_xml = []
                            list_valorUnitario_xml = []
                            list_tax_amount_line = []
                            list_retenciones = []
                            list_retenciones_name = []
                            list_traslados = []
                            list_traslados_name = []
                            list_importe_ret_xml = []
                            list_importe_traslados_xml = []
                            list_name_traslados_xml = []
                            totalImpuestosRetenidos = 0.00
                            totalImpuestosTrasladados = 0.00
                            totalImpuestosRetenidos_xml = 0.00
                            totalImpuestosTrasladados_xml = 0.00
                            amount_total_tax = 0.00
                            importe_ret = 0.00
                            if invoice_lines:
                                for n in doc_xml.getElementsByTagName("cfdi:Comprobante"):
                                    xml_total = n.getAttribute("total")
                                    xml_subTotal = n.getAttribute("subTotal")
                                    assert data_invoice['amount_total'] == eval(xml_total), 'No matches Total'
                                    assert data_invoice['amount_untaxed'] == eval(xml_subTotal), 'No matches Subtotal'
                                for line in invoice_lines[0]['invoice_line']:
                                    for r in aml_obj.read(cr, uid, [line]):
                                        list_price_subtotal.append(r['price_subtotal'])
                                        list_price_unit.append(r['price_unit'])
                                for n in doc_xml.getElementsByTagName("cfdi:Comprobante"):
                                    for conceptos in n.getElementsByTagName("cfdi:Conceptos"):
                                        for concepto in conceptos.getElementsByTagName("cfdi:Concepto"):
                                            importe = concepto.getAttribute("importe")
                                            valorUnitario =  concepto.getAttribute("valorUnitario")
                                            list_importe_xml.append(eval(importe))
                                            list_valorUnitario_xml.append(eval(valorUnitario))
                                assert list_price_subtotal == list_importe_xml, 'No matches Importe of product'
                                assert list_price_unit == list_valorUnitario_xml, 'No matches Price Unit of product'
                                for tax in tax_lines[0]['tax_line']:
                                    for t in tax_obj.read(cr, uid, [tax]):
                                        if t['amount'] >= 0:
                                            traslado = abs(t['amount']) or 0.0
                                            list_traslados.append(traslado)
                                            totalImpuestosTrasladados += traslado or 0.0
                                        else:
                                            retencion = abs(t['amount']) or 0.0
                                            list_retenciones.append(retencion)
                                            totalImpuestosRetenidos += retencion or 0.0
                                for taxes in n.getElementsByTagName("cfdi:Impuestos"):
                                    totalImpuestosTrasladados_xml = eval(taxes.getAttribute("totalImpuestosTrasladados"))
                                    totalImpuestosRetenidos_xml = eval(taxes.getAttribute("totalImpuestosRetenidos"))
                                    if taxes.getElementsByTagName("cfdi:Retenciones"):
                                        for retenciones in taxes.getElementsByTagName("cfdi:Retenciones"):
                                            for ret in retenciones.getElementsByTagName("cfdi:Retencion"):
                                                importe_ret = eval(ret.getAttribute("importe"))
                                                list_importe_ret_xml.append(importe_ret)
                                    if taxes.getElementsByTagName("cfdi:Traslados"):
                                        for traslados in taxes.getElementsByTagName("cfdi:Traslados"):
                                            for traslado in traslados.getElementsByTagName("cfdi:Traslado"):
                                                importe_trasladado = eval(traslado.getAttribute("importe"))
                                                impuesto_trasladado = traslado.getAttribute("impuesto")
                                                list_importe_traslados_xml.append(importe_trasladado)
                                                list_name_traslados_xml.append(impuesto_trasladado)
                                assert totalImpuestosRetenidos == totalImpuestosRetenidos_xml, 'No matches Total Impuestos Retenidos of product'
                                assert totalImpuestosTrasladados == totalImpuestosTrasladados_xml, 'No matches Total Impuestos Trasladados of product'
                                assert list_retenciones == list_importe_ret_xml, 'No matches Importe Retenido of product'
                                assert list_traslados == list_importe_traslados_xml, 'No matches Importe Traslado of product'
                            if fdata:
                                if tools.config['test_report_directory']:
                                    open(os.path.join(tools.config['test_report_directory'], 'l10n_mx_cfdi_test' + '_' + \
                                      xml_id_invoice + '_' + 'confirmed' + '-' + ir_attach_facturae_mx.datas_fname)\
                                      , 'wb+').write( base64.decodestring( fdata ) )
                            else:
                                state = 'no data in attach file'
                        assert state=='confirmed', 'No confirmed state l10n_mx attachment facturae %s' % (pac_type)
                        
                        #################################################################################################
                        #   7 I sign l10n_mx attachment facturae cfdi_pac_finkok by clicking on sign button upload pac  #
                        #################################################################################################
                        log("7 I sign l10n_mx attachment facturae %s by clicking on sign button upload %s"% (xml_id_invoice,pac_type))
                        with ti.Timer() as t:
                            cfdi_attachment_data = ir_attachment_mx_obj.browse(cr, uid, cfdi_attachment_id, context=context)
                            ir_attachment_mx_obj.signal_sign(cr, uid, cfdi_attachment_ids, context=context)
                        time_tmp = t.secs
                        time_total += time_tmp
                        log("*** Signal %s: %s s" % (type_document,time_tmp))
                        
                        #################################################################################################
                        #    8 I check that the state in l10n_mx attachment facturae cfdi_attachment_data is "Done"   #
                        #################################################################################################
                        log("8 I check that the state in l10n_mx attachment facturae %s is Done"% (xml_id_invoice))
                        cfdi_attachment_data = ir_attachment_mx_obj.browse(cr, uid, cfdi_attachment_id, context=context)
                        ir_attach_facturae_mx = cfdi_attachment_data.file_xml_sign and cfdi_attachment_data.file_xml_sign or False
                        fdata = ir_attach_facturae_mx and ir_attach_facturae_mx.db_datas or False
                        data_xml_sign = base64.decodestring( fdata )
                        data_invoice = self.read(cr, uid, invoice_id,[])
                        doc_xml_sign = xml.dom.minidom.parseString(data_xml_sign)
                        tax_lines = self.read(cr, uid, [invoice_id],['tax_line'])
                        list_price_subtotal_invoice_data = []
                        list_price_unit_invoice_data = []
                        list_importe_xml_sign = []
                        list_valorUnitario_xml_sign = []
                        list_tax_amount_line_xml_sign = []
                        list_retenciones_xml_sign = []
                        list_retenciones_invoice_sign = []
                        list_retenciones_name_xml_sign = []
                        list_traslados_xml_sign = []
                        list_traslados_invoice_sign = []
                        list_traslados_name_xml_sign = []
                        list_importe_ret_xml_sign = []
                        list_importe_traslados_xml_sign = []
                        list_name_traslados_xml_sign = []
                        totalImpuestosRetenidos_xml_sign = 0.00
                        totalImpuestosTrasladados_xml_sign = 0.00
                        totalImpuestosRetenidos_invoice_sign = 0.00
                        totalImpuestosTrasladados_invoice_sign = 0.00
                        amount_total_tax_xml_sign = 0.00
                        importe_ret_xml_sign = 0.00
                        if invoice_lines:
                            for n in doc_xml_sign.getElementsByTagName("cfdi:Comprobante"):
                                xml_total_xml_sign = n.getAttribute("total")
                                xml_subTotal_xml_sign = n.getAttribute("subTotal")
                                assert data_invoice['amount_total'] == eval(xml_total_xml_sign), 'No matches XML SIGN Total'
                                assert data_invoice['amount_untaxed'] == eval(xml_subTotal_xml_sign), 'No matches XML SIGN Subtotal'
                            for line in invoice_lines[0]['invoice_line']:
                                for r in aml_obj.read(cr, uid, [line]):
                                    list_price_subtotal_invoice_data.append(r['price_subtotal'])
                                    list_price_unit_invoice_data.append(r['price_unit'])
                            for n in doc_xml_sign.getElementsByTagName("cfdi:Comprobante"):
                                for conceptos in n.getElementsByTagName("cfdi:Conceptos"):
                                    for concepto in conceptos.getElementsByTagName("cfdi:Concepto"):
                                        importe_xml_sign = concepto.getAttribute("importe")
                                        valorUnitario_xml_sign =  concepto.getAttribute("valorUnitario")
                                        list_importe_xml_sign.append(eval(importe_xml_sign))
                                        list_valorUnitario_xml_sign.append(eval(valorUnitario_xml_sign))
                            assert list_price_subtotal_invoice_data == list_importe_xml_sign, 'No matches XML SIGN Importe of product'
                            assert list_price_unit_invoice_data == list_valorUnitario_xml_sign, 'No matches XML SIGN Price Unit of product'
                            for tax in tax_lines[0]['tax_line']:
                                for t in tax_obj.read(cr, uid, [tax]):
                                    if t['amount'] >= 0:
                                        traslado_invoice_sign = abs(t['amount']) or 0.0
                                        list_traslados_invoice_sign.append(traslado_invoice_sign)
                                        totalImpuestosTrasladados_invoice_sign += traslado_invoice_sign or 0.0
                                    else:
                                        retencion_invoice_sign = abs(t['amount']) or 0.0
                                        list_retenciones_invoice_sign.append(retencion_invoice_sign)
                                        totalImpuestosRetenidos_invoice_sign += retencion_invoice_sign or 0.0
                            for taxes in n.getElementsByTagName("cfdi:Impuestos"):
                                totalImpuestosRetenidos_xml_sign = eval(taxes.getAttribute("totalImpuestosRetenidos"))
                                totalImpuestosTrasladados_xml_sign = eval(taxes.getAttribute("totalImpuestosTrasladados"))
                                if taxes.getElementsByTagName("cfdi:Retenciones"):
                                    for retenciones in taxes.getElementsByTagName("cfdi:Retenciones"):
                                        for ret in retenciones.getElementsByTagName("cfdi:Retencion"):
                                            importe_ret_xml_sign = eval(ret.getAttribute("importe"))
                                            list_importe_ret_xml_sign.append(importe_ret_xml_sign)
                                if taxes.getElementsByTagName("cfdi:Traslados"):
                                    for traslados in taxes.getElementsByTagName("cfdi:Traslados"):
                                        for traslado in traslados.getElementsByTagName("cfdi:Traslado"):
                                            importe_trasladado_xml_sign = eval(traslado.getAttribute("importe"))
                                            impuesto_trasladado_xml_sign = traslado.getAttribute("impuesto")
                                            list_importe_traslados_xml_sign.append(importe_trasladado_xml_sign)
                                            list_name_traslados_xml_sign.append(impuesto_trasladado_xml_sign)
                            assert totalImpuestosRetenidos_invoice_sign == totalImpuestosRetenidos_xml_sign, 'No matches XML SIGN Total Impuestos Retenidos of product'
                            assert totalImpuestosTrasladados_invoice_sign == totalImpuestosTrasladados_xml_sign, 'No matches XML SIGN Total Impuestos Trasladados of product'
                            assert list_retenciones_invoice_sign == list_importe_ret_xml_sign, 'No matches  XML SIGN Importe Retenido of product'
                            assert list_traslados_invoice_sign == list_importe_traslados_xml_sign, 'No matches XML SIGN Importe Traslado of product'
                        if fdata:
                            state = cfdi_attachment_data.state
                            if tools.config['test_report_directory']:
                                open(os.path.join(tools.config['test_report_directory'], 'l10n_mx_cfdi_test' + '_' + \
                                  xml_id_invoice + '_' + 'signed' + '-' + ir_attach_facturae_mx.datas_fname)\
                                  , 'wb+').write( base64.decodestring( fdata ) )
                        else:
                            state = 'no data in attach file'
                        assert state=='done', 'No done state l10n_mx attachment facturae %s' % (pac_type)
                        
                        ################################################################################################################
                        #   9 I generate a printable l10n_mx attachment facturae cfdi_attachment_data by clicking on printable button  #
                        ################################################################################################################
                        log("9 I generate a printable l10n_mx attachment facturae %s by clicking on printable button"% (xml_id_invoice))
                        with ti.Timer() as t:
                            cfdi_attachment_data = ir_attachment_mx_obj.browse(cr, uid, cfdi_attachment_id, context=context)
                            ir_attachment_mx_obj.signal_printable(cr, uid , cfdi_attachment_ids ,context=context)
                        time_tmp = t.secs
                        time_total += time_tmp
                        log("*** Printable %s: %s s" % (type_document,time_tmp))
                        
                        #######################################################################################################
                        #   10 I check that the file pdf in l10n_mx attachment facturae cfdi_attachment_data was created      #
                        #######################################################################################################
                        log("10 I check that the file pdf in l10n_mx attachment facturae %s was created"% (xml_id_invoice))
                        cfdi_attachment_data = ir_attachment_mx_obj.browse(cr, uid, cfdi_attachment_id, context=context)
                        ir_attach_facturae_mx = cfdi_attachment_data.file_pdf and cfdi_attachment_data.file_pdf or False
                        fdata = ir_attach_facturae_mx and ir_attach_facturae_mx.db_datas or False
                        if fdata:
                            if tools.config['test_report_directory']:
                                open(os.path.join(tools.config['test_report_directory'], 'l10n_mx_cfdi_test' + '_' + \
                                  xml_id_invoice + '_' + 'printable' + '-' + ir_attach_facturae_mx.datas_fname)\
                                  , 'wb+').write( base64.decodestring( fdata ) )
                        assert ir_attach_facturae_mx, 'No printable state l10n_mx attachment facturae %s'% (xml_id_invoice)
                        
                        if type_test_cancel == 'cancel_from_invoce':
                            #############################################################################################################
                            #   11 I cancel from invoice by clicking on cancel button                                                   #
                            #############################################################################################################
                            log("11 I cancel from %s %s by clicking on cancel button"% (type_document,xml_id_invoice))
                            with ti.Timer() as t:
                                wf_service.trg_validate(uid, 'account.invoice', ref(xml_id_invoice), 'invoice_cancel', cr)
                            time_tmp = t.secs
                            time_total += time_tmp
                            log("*** Cancel %s from model source: %s s" % (type_document,time_tmp))
                            
                        if type_test_cancel == 'cancel_from_attachment_facturae_mx':
                            ########################################################################################################
                            #   11 I cancel from attachment                                                                        #
                            ########################################################################################################
                            log("11 I cancel from l10n_mx attachment facturae %s by clicking on cancel button"% (xml_id_invoice))
                            with ti.Timer() as t:
                                ir_attachment_mx_obj.signal_cancel(cr, uid , cfdi_attachment_ids ,context=context)
                            time_tmp = t.secs
                            time_total += time_tmp
                            log("*** Cancel %s from attachment : %s s" % (type_document,time_tmp))
                            
                        #######################################################################################################
                        #    12 I check that the state in l10n_mx attachment and facturae cfdi_attachment_data are "Cancel"   #
                        #######################################################################################################
                        log("12 I check that the state in l10n_mx attachment and facturae %s are Cancel"% (xml_id_invoice))
                        cfdi_attachment_data = ir_attachment_mx_obj.browse(cr, uid, cfdi_attachment_id, context=context)
                        state = cfdi_attachment_data.state
                        assert state=='cancel', 'No cancel state l10n_mx attachment' % (pac_type)
                        invoice_data = self.browse(cr, uid, invoice_id, context=context)
                        state = invoice_data.state
                        assert state=='cancel', 'No cancel state invoice %s' % (xml_id_invoice)
                        
                        #######################
                        #   end all test      #
                        #######################
                        all_ok = True
                    except Exception, e:
                        _logger.error(tools.ustr(e))
                        assert all_ok == False, 'Something failure'
                        pass
                    finally:
                        if res_id:
                            # This is because OpenERP module make an inspection of xml ids if not exist this one. try delete it.
                            ir_model_data.unlink(cr, uid, [res_id],context=context)
                _logger.info( "Process complete in : %s s" % (time_total))
